function newfacedata = resampleContours(facedata, spacing, mode)
% function newfacedata = resampleContours(facedata, spacing, mode)
%{
Contour lines generated by triContour can have points that are irregularly
spaced, with the closest points separated by less than 0.1[mm]. This yields
contour-based wires that are difficult to interpolate or impossible to
mesh. The included function "interparc" by John D'Errico resamples
arbitrary curves at uniform lengths. Unfortunately, the contours we're
workign with are wildly variable in length (from 1[cm] to 2.5[m]), so
uniformly resampling contours to the same number of points will not yield
the desired uniformity.

So what we'll do is blindly resample the curve, use the resulting
separation to estimate how many points are needed to yield points that are
approximately "spacing" [m] apart.

Austin Reid 2020.07.15
%}

newfacedata = facedata;

for i = 1:length(facedata)
    for j =1:length(facedata{i}{5})
        for k = 1:length(facedata{i}{5}{j})
            contour = facedata{i}{5}{j}{k};
            if ~isempty(contour)
                newcontour = resample(contour, spacing, mode);
                newfacedata{i}{5}{j}{k} = newcontour;
            end
        end
    end
end

end

function newcontour = resample(contour, spacing, mode)
x = contour(1,:);
y = contour(2,:);

% first try
n = 15;

pt = interparc(n,x,y,mode);
dpt = diff(pt);
ell = sqrt(mean(sum(dpt.^2,2)));
err = ell/spacing;

itercount = 5;
refining = true;
while refining
    itercount = itercount - 1;
    if itercount>0
        n = round(n*err);
        pt = interparc(n,x,y,mode);
        dpt = diff(pt);
        ell = sqrt(mean(sum(dpt.^2,2)));
        err = abs(spacing-ell)/spacing;
    else
        refining = false;
    end
    if err<0.1
        refining = false;
    end
end
newcontour = pt';
end